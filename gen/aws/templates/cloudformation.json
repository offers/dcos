{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "DC/OS AWS CloudFormation Template",

  "Metadata": {
    "DcosImageCommit": "unset",
    "TemplateGenerationDate": "unset"
  },

  "Parameters" : {
    "KeyName" : {
      "Description" : "Required: Specify your AWS EC2 Key Pair.",
      "Type" : "AWS::EC2::KeyPair::KeyName"
    },
    "Vpc" : {
      "Description" : "Required: Vpc to launch all resources in",
      "Type" : "AWS::EC2::Vpc::Id"
    },
    "AdminLocation": {
      "Description" : "Optional: Specify the IP range to whitelist for access to the admin zone. Must be a valid CIDR.",
      "Type" : "String",
      "MinLength" : "9",
      "MaxLength" : "18",
      "Default" : "0.0.0.0/0",
      "AllowedPattern" : "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$",
      "ConstraintDescription" : "must be a valid CIDR."
    },
    "SlaveInstanceCount" : {
      "Description" : "Required: Specify the number of private agent nodes or accept the default.",
      "Type" : "Number",
      "Default" : "{{ num_private_slaves }}"
    }
{% switch oauth_available %}
{% case "true" %}
    ,
    "OAuthEnabled": {
      "Description": "\nEnable OAuth authentication",
      "Type": "String",
      "Default": "true",
      "AllowedValues": ["true", "false"]
    }
{% case "false" %}
{% endswitch %}
  },
  "Mappings": {
    "ClusterPackagesJson": { "default": { "default": {{ cluster_packages_json_var }} } },
    "RegionToAmi": {{ region_to_ami_mapping }},
    "NATAmi" : {{ nat_ami_mapping }},
    "Parameters": {
      "MasterInstanceType": {
        "default": "m3.2xlarge"
      },
      "SlaveInstanceType": {
        "default": "m4.10xlarge"
      },
      "PrivateSubnetRange": {
        "default": "10.0.0.0/22"
      },
      "VPCSubnetRange": {
        "default": "10.0.0.0/16"
      },
      "StackCreationTimeout": {
          "default": "PT45M"
      }
    }
  },

  "Conditions" : {
    "RegionIsUsEast1": { "Fn::Equals": [ { "Ref": "AWS::Region" }, "us-east-1" ] },
    "RegionIsUsGovWest1" : {
      "Fn::Equals" : [
        { "Ref" : "AWS::Region" },
        "us-gov-west-1"
      ]
    }
  },

  "Resources" : {
    "AdminSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable admin access to servers",
        "VpcId" : { "Ref" : "Vpc" },
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : { "Ref" : "AdminLocation" }
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "CidrIp" : { "Ref" : "AdminLocation" }
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "443",
          "ToPort" : "443",
          "CidrIp" : { "Ref" : "AdminLocation" }
        } ]
      }
    },
    "ExhibitorS3Bucket" : {
      "Type" : "AWS::S3::Bucket",
      "DeletionPolicy" : "Retain"
    },
    "MasterRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/",
        "Policies": [ {
          "PolicyName": "root",
          "PolicyDocument": {
            "Version" : "2012-10-17",
            "Statement": [ {
              "Effect": "Allow",
              "Action": [
                "s3:AbortMultipartUpload",
                "s3:DeleteObject",
                "s3:GetBucketAcl",
                "s3:GetBucketPolicy",
                "s3:GetObject",
                "s3:GetObjectAcl",
                "s3:ListBucket",
                "s3:ListBucketMultipartUploads",
                "s3:ListMultipartUploadParts",
                "s3:PutObject",
                "s3:PutObjectAcl"
              ],
              "Resource": [
                { "Fn::Join" : [
                  "",
                  [
                    { "Fn::If" : [ "RegionIsUsGovWest1", "arn:aws-us-gov:s3:::", "arn:aws:s3:::" ] },
                    { "Ref" : "ExhibitorS3Bucket" },
                    "/*"
                  ]
                ] },
                { "Fn::Join" : [
                  "",
                  [
                    { "Fn::If" : [ "RegionIsUsGovWest1", "arn:aws-us-gov:s3:::", "arn:aws:s3:::" ] },
                    { "Ref" : "ExhibitorS3Bucket" }
                  ]
                ] }
              ]
            },
            {
              "Resource": [
                  { "Ref" : "AWS::StackId" },
                  { "Fn::Join" : ["", [{ "Ref" : "AWS::StackId" }, "/*" ]]}
              ],
              "Action": [
                  "cloudformation:*"
              ],
              "Effect": "Allow"
            },
            {
                "Resource": "*",
                "Action": [
                    "ec2:DescribeKeyPairs",
                    "ec2:DescribeSubnets",
                    "autoscaling:DescribeLaunchConfigurations",
                    "autoscaling:UpdateAutoScalingGroup",
                    "autoscaling:DescribeAutoScalingGroups",
                    "autoscaling:DescribeScalingActivities",
                    "elasticloadbalancing:DescribeLoadBalancers"
                ],
                "Effect": "Allow"
            }
            ]
          }
        } ]
      }
    },
    "SlaveRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Policies": [ {
          "PolicyName": "Slaves",
          "PolicyDocument": {
            "Version" : "2012-10-17",
            "Statement": [ {
              "Resource": [
                  { "Ref" : "AWS::StackId" },
                  { "Fn::Join" : ["", [{ "Ref" : "AWS::StackId" }, "/*" ]]}
              ],
              "Action": [
                  "cloudformation:*"
              ],
              "Effect": "Allow"
            },
            {
              "Resource": "*",
              "Action": [
                "ec2:CreateTags",
                "ec2:DescribeInstances",
                "ec2:CreateVolume",
                "ec2:DeleteVolume",
                "ec2:AttachVolume",
                "ec2:DetachVolume",
                "ec2:DescribeVolumes",
                "ec2:DescribeVolumeStatus",
                "ec2:DescribeVolumeAttribute",
                "ec2:CreateSnapshot",
                "ec2:CopySnapshot",
                "ec2:DeleteSnapshot",
                "ec2:DescribeSnapshots",
                "ec2:DescribeSnapshotAttribute",
                "autoscaling:DescribeAutoScalingGroups",
                "cloudwatch:PutMetricData"
              ],
              "Effect": "Allow"
            }
            ]
          }
        } ]
      }
    },
    "MasterInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ {
          "Ref": "MasterRole"
        } ]
      }
    },
    "SlaveInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ {
          "Ref": "SlaveRole"
        } ]
      }
    },
    "MasterServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : [{ "Fn::GetAtt" : [ "PrivateSubnet", "AvailabilityZone" ] }],
        "LaunchConfigurationName" : { "Ref" : "MasterLaunchConfig" },
        "MinSize" : {{ num_masters }},
        "MaxSize" : {{ num_masters }},
        "DesiredCapacity" : {{ num_masters }},
        "LoadBalancerNames" : [ { "Ref" : "InternalMasterLoadBalancer"} ],
        "VPCZoneIdentifier" : [{ "Ref" : "PrivateSubnet" }],
        "Tags" : [
          {
            "Key" : "role",
            "Value" : "mesos-master",
            "PropagateAtLaunch" : "true"
          }
        ]
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : { "Fn::FindInMap" : [ "Parameters", "StackCreationTimeout", "default" ] },
          "Count" : {{ num_masters }}
        }
      }
    },
    "MasterLaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : { "Fn::FindInMap" : [ "RegionToAmi", { "Ref" : "AWS::Region" }, "stable" ] },
        "BlockDeviceMappings" : [ { "DeviceName" : "/dev/sdb", "VirtualName" : "ephemeral0" } ],
        "SecurityGroups" : [ { "Ref" : "MasterSecurityGroup" }, { "Ref" : "AdminSecurityGroup" } ],
        "IamInstanceProfile" : { "Ref" : "MasterInstanceProfile" },
        "AssociatePublicIpAddress" : "false",
        "EbsOptimized": "true",
        "InstanceType" : { "Fn::FindInMap" : [ "Parameters", "MasterInstanceType", "default" ] },
        "UserData" : { "Fn::Base64" : { "Fn::Join": ["", [
          {{ master_cloud_config }}
        ]]
        }
        }
      }
    },
    "MasterSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Mesos Masters",
        "VpcId" : { "Ref" : "Vpc" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "5050", "ToPort" : "5050", "SourceSecurityGroupId" : { "Ref" : "LbSecurityGroup"} },
          { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "SourceSecurityGroupId" : { "Ref" : "LbSecurityGroup"} },
          { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "SourceSecurityGroupId" : { "Ref" : "LbSecurityGroup"} },
          { "IpProtocol" : "tcp", "FromPort" : "8080", "ToPort" : "8080", "SourceSecurityGroupId" : { "Ref" : "LbSecurityGroup"} },
          { "IpProtocol" : "tcp", "FromPort" : "8181", "ToPort" : "8181", "SourceSecurityGroupId" : { "Ref" : "LbSecurityGroup"} },
          { "IpProtocol" : "tcp", "FromPort" : "2181", "ToPort" : "2181", "SourceSecurityGroupId" : { "Ref" : "LbSecurityGroup"} }
        ]
      }
    },
    "MasterToMasterIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "MasterSecurityGroup" },
        "IpProtocol" : "-1",
        "FromPort" : "0",
        "ToPort" : "65535",
        "SourceSecurityGroupId" : { "Ref" : "MasterSecurityGroup" }
      }
    },
    "LbSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Mesos Master LB",
        "VpcId" : { "Ref" : "Vpc" }
      }
    },
    "InternalMasterLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "SecurityGroups": [{ "Ref": "LbSecurityGroup" }, { "Ref" : "AdminSecurityGroup" }, { "Ref" : "SlaveSecurityGroup" }, { "Ref" : "MasterSecurityGroup" }],
        "Subnets": [{ "Ref": "PrivateSubnet" }],
        "Scheme": "internal",
        "Listeners" : [
          {
            "LoadBalancerPort" : "5050",
            "Protocol" : "HTTP",
            "InstancePort" : "5050",
            "InstanceProtocol" : "HTTP"
          },
          {
            "LoadBalancerPort" : "2181",
            "Protocol" : "TCP",
            "InstancePort" : "2181",
            "InstanceProtocol" : "TCP"
          },
          {
            "LoadBalancerPort" : "8181",
            "Protocol" : "HTTP",
            "InstancePort" : "8181",
            "InstanceProtocol" : "HTTP"
          },
          {
            "LoadBalancerPort" : "80",
            "Protocol" : "TCP",
            "InstancePort" : "80",
            "InstanceProtocol" : "TCP"
          },
          {
            "LoadBalancerPort" : "443",
            "Protocol" : "TCP",
            "InstancePort" : "443",
            "InstanceProtocol" : "TCP"
          },
          {
            "LoadBalancerPort" : "8080",
            "Protocol" : "HTTP",
            "InstancePort" : "8080",
            "InstanceProtocol" : "HTTP"
          }],
        "HealthCheck" : {
          "Target" : "TCP:5050",
          "HealthyThreshold" : "2",
          "UnhealthyThreshold" : "2",
          "Interval" : "30",
          "Timeout" : "5"
        }
      }
    },
    "SlaveServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : [{ "Fn::GetAtt" : [ "PrivateSubnet", "AvailabilityZone" ] }],
        "LaunchConfigurationName" : { "Ref" : "SlaveLaunchConfig" },
        "MinSize" : { "Ref" : "SlaveInstanceCount" },
        "MaxSize" : { "Ref" : "SlaveInstanceCount" },
        "DesiredCapacity" : { "Ref" : "SlaveInstanceCount" },
        "VPCZoneIdentifier" : [{ "Ref" : "PrivateSubnet" }],
        "Tags" : [
          {
            "Key" : "role",
            "Value" : "mesos-slave",
            "PropagateAtLaunch" : "true"
          }
        ]
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : { "Fn::FindInMap" : [ "Parameters", "StackCreationTimeout", "default" ] },
          "Count" : { "Ref" : "SlaveInstanceCount" }
        }
      }
    },

    "SlaveLaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : { "Fn::FindInMap" : [ "RegionToAmi", { "Ref" : "AWS::Region" }, "stable" ] },
        "BlockDeviceMappings" : [ { "DeviceName" : "/dev/sdb", "VirtualName" : "ephemeral0" } ],
        "SecurityGroups" : [ { "Ref" : "SlaveSecurityGroup" } ],
        "IamInstanceProfile" : { "Ref" : "SlaveInstanceProfile" },
        "EbsOptimized": "true",
        "AssociatePublicIpAddress" : "false",
        "InstanceType" : { "Fn::FindInMap" : [ "Parameters", "SlaveInstanceType", "default" ] },
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          {{ agent_private_cloud_config }}
        ]]}}
      }
    },

    "SlaveSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Mesos Slaves",
        "VpcId" : { "Ref" : "Vpc" }
      }
    },

    "MasterToSlaveIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "SlaveSecurityGroup" },
        "IpProtocol" : "-1",
        "FromPort" : "0",
        "ToPort" : "65535",
        "SourceSecurityGroupId" : { "Ref" : "MasterSecurityGroup" }
      }
    },
    "SlaveToMasterIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "MasterSecurityGroup" },
        "IpProtocol" : "-1",
        "FromPort" : "0",
        "ToPort" : "65535",
        "SourceSecurityGroupId" : { "Ref" : "SlaveSecurityGroup" }
        }
    },
    "SlaveToMasterLBIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "LbSecurityGroup" },
        "IpProtocol" : "tcp",
        "FromPort" : "2181",
        "ToPort" : "2181",
        "SourceSecurityGroupId" : { "Ref" : "SlaveSecurityGroup" }
      }
    },
    "SlaveToSlaveIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "SlaveSecurityGroup" },
        "IpProtocol" : "-1",
        "FromPort" : "0",
        "ToPort" : "65535",
        "SourceSecurityGroupId" : { "Ref" : "SlaveSecurityGroup" }
      }
    }
  },

  "Outputs" : {
    "DnsAddress" : {
      "Description" : "Mesos Master",
      "Value" : { "Fn::GetAtt" : [ "InternalMasterLoadBalancer", "DNSName" ]}
    },
    "ExhibitorS3Bucket" : {
      "Description" : "Exhibitor S3 bucket name",
      "Value" : { "Ref" : "ExhibitorS3Bucket" }
    }
  }
}
