{
   "AWSTemplateFormatVersion": "2010-09-09",
    "Metadata": {
    "DcosImageCommit": "unset",
    "TemplateGenerationDate": "unset"
    },
    "Mappings": {
        "ClusterPackagesJson": { "default": { "default": {{ cluster_packages_json_var }} } }
    },
    "Parameters": {
        "KeyName": {
          "Type": "AWS::EC2::KeyPair::KeyName",
          "Description": "\nSpecify your AWS EC2 Key Pair."
        },
        "Vpc": {
          "Description" : "\nExisting VPC to use. Nodes will be launched using subnets and Internet Gateway under this VPC",
          "Type": "AWS::EC2::VPC::Id"
        },
        "PrivateSubnet1": {
          "Description" : "\nSubnet ID for use by some private agent nodes",
          "Type": "AWS::EC2::Subnet::Id"
        },
        "PrivateSubnet2": {
          "Description" : "\nSubnet ID for use by some private agent nodes",
          "Type": "AWS::EC2::Subnet::Id"
        },
        "PrivateAgent1InstanceCount": {
          "Type": "Number",
          "Default": "6",
          "Description": "\nSpecify the number of private agent nodes or accept the default."
        },
        "PrivateAgent2InstanceCount": {
          "Type": "Number",
          "Default": "5",
          "Description": "\nSpecify the number of private agent nodes or accept the default."
        },
        "MasterInstanceType": {
          "Type": "String",
          "Default": "m3.2xlarge",
          "Description" : "\nRegion-specific instance type. E.g. m3.xlarge"
        },
        "PrivateAgentInstanceType": {
          "Type": "String",
          "Default": "m4.10xlarge",
          "Description" : "\nRegion-specific instance type. E.g. m3.xlarge"
        },
        "CustomAMI": {
          "Default": "ami-1ad0000c",
          "Type": "String",
          "Description": "\nExisting AMI in the deploy region which has all DC/OS pre-requisites installed or 'default'",
          "AllowedPattern": "(default|ami-[a-f0-9]{8})"
        },
        "AdminLocation": {
          "Description" : "\nOptional: Specify the IP range to whitelist for access to the admin zone. Must be a valid CIDR.",
          "Type" : "String",
          "MinLength" : "9",
          "MaxLength" : "18",
          "Default" : "0.0.0.0/0",
          "AllowedPattern" : "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$",
          "ConstraintDescription" : "must be a valid CIDR."
        }
{% switch oauth_available %}
{% case "true" %}
        ,
        "OAuthEnabled": {
          "Description": "\nEnable OAuth authentication",
          "Type": "String",
          "Default": "true",
          "AllowedValues": ["true", "false"]
        }
{% case "false" %}
{% endswitch %}
    },
   "Resources": {
       "Infrastructure": {
           "Type": "AWS::CloudFormation::Stack",
           "Properties": {
               "TemplateURL": "{{ cloudformation_s3_url_full }}/infra.json",
               "TimeoutInMinutes": "60",
               "Parameters": {
                    "KeyName": {
                        "Ref": "KeyName"
                    },
                    "Vpc": {
                      "Ref": "Vpc"
                    },
                    "AdminLocation": {
                      "Ref": "AdminLocation"
                    }
              }
           }
       },
       "MasterStack": {
           "DependsOn": ["Infrastructure"],
           "Type": "AWS::CloudFormation::Stack",
           "Properties": {
               "TemplateURL": "{{ cloudformation_s3_url_full }}/{{ variant_prefix }}{{ os_type }}-advanced-master-{{ num_masters }}.json",
               "Parameters": {
                    "KeyName": {
                        "Ref": "KeyName"
                    },
                    "PrivateSubnet1": {
                      "Ref": "PrivateSubnet1"
                    },
                    "PrivateSubnet2": {
                      "Ref": "PrivateSubnet2"
                    },
                    "AdminSecurityGroup": {
                      "Fn::GetAtt" : [ "Infrastructure", "Outputs.AdminSecurityGroupId" ]
                    },
                    "MasterSecurityGroup": {
                      "Fn::GetAtt" : [ "Infrastructure", "Outputs.MasterSecurityGroupId" ]
                    },
                    "LbSecurityGroup": {
                      "Fn::GetAtt" : [ "Infrastructure", "Outputs.LbSecurityGroupId" ]
                    },
                    "PrivateAgentSecurityGroup": {
                      "Fn::GetAtt" : [ "Infrastructure", "Outputs.PrivateAgentSecurityGroupId" ]
                    },
                    "MasterInstanceType": {
                      "Ref": "MasterInstanceType"
                    },
                    "CustomAMI": {
                      "Ref": "CustomAMI"
                    },
                    "ExhibitorS3Bucket": {
                      "Fn::GetAtt" : [ "Infrastructure", "Outputs.ExhibitorS3BucketId" ]
                    }
{% switch oauth_available %}
{% case "true" %}
                    ,
                    "OAuthEnabled": {
                      "Ref": "OAuthEnabled"
                    }
{% case "false" %}
{% endswitch %}
               },
               "TimeoutInMinutes": "60"
           }
       },
       "PrivateAgent1Stack": {
           "DependsOn": ["Infrastructure", "MasterStack"],
           "Type": "AWS::CloudFormation::Stack",
           "Properties": {
               "TemplateURL": "{{ cloudformation_s3_url_full }}/{{ variant_prefix }}{{ os_type }}-advanced-priv-agent.json",
               "Parameters": {
                    "KeyName": {
                        "Ref": "KeyName"
                    },
                    "InternalMasterLoadBalancerDnsName": {
                      "Fn::GetAtt" : [ "MasterStack", "Outputs.InternalMasterLoadBalancerDnsName" ]
                    },
                    "PrivateAgentSecurityGroup": {
                      "Fn::GetAtt" : [ "Infrastructure", "Outputs.PrivateAgentSecurityGroupId" ]
                    },
                    "PrivateSubnet": {
                      "Ref": "PrivateSubnet1"
                    },
                    "PrivateAgentInstanceType": {
                      "Ref": "PrivateAgentInstanceType"
                    },
                    "PrivateAgentInstanceCount": {
                      "Ref": "PrivateAgent1InstanceCount"
                    },
                    "CustomAMI": {
                      "Ref": "CustomAMI"
                    }
{% switch oauth_available %}
{% case "true" %}
                    ,
                    "OAuthEnabled": {
                      "Ref": "OAuthEnabled"
                    }
{% case "false" %}
{% endswitch %}
               },
               "TimeoutInMinutes": "60"
           }
       },
       "PrivateAgent2Stack": {
           "DependsOn": ["Infrastructure", "MasterStack"],
           "Type": "AWS::CloudFormation::Stack",
           "Properties": {
               "TemplateURL": "{{ cloudformation_s3_url_full }}/{{ variant_prefix }}{{ os_type }}-advanced-priv-agent.json",
               "Parameters": {
                    "KeyName": {
                        "Ref": "KeyName"
                    },
                    "InternalMasterLoadBalancerDnsName": {
                      "Fn::GetAtt" : [ "MasterStack", "Outputs.InternalMasterLoadBalancerDnsName" ]
                    },
                    "PrivateAgentSecurityGroup": {
                      "Fn::GetAtt" : [ "Infrastructure", "Outputs.PrivateAgentSecurityGroupId" ]
                    },
                    "PrivateSubnet": {
                      "Ref": "PrivateSubnet2"
                    },
                    "PrivateAgentInstanceType": {
                      "Ref": "PrivateAgentInstanceType"
                    },
                    "PrivateAgentInstanceCount": {
                      "Ref": "PrivateAgent2InstanceCount"
                    },
                    "CustomAMI": {
                      "Ref": "CustomAMI"
                    }
{% switch oauth_available %}
{% case "true" %}
                    ,
                    "OAuthEnabled": {
                      "Ref": "OAuthEnabled"
                    }
{% case "false" %}
{% endswitch %}
               },
               "TimeoutInMinutes": "60"
           }
       }
   },
   "Outputs": {
       "StackRef": {
           "Value": { "Ref": "MasterStack" }
       },
       "OutputFromNestedStack": {
           "Value": { "Fn::GetAtt": [ "MasterStack", "Outputs.MasterDNSName" ]}
       }
   }
}
